version: 2.1
parameters:
  cache-version:
    type: string
    default: "v14"
# orbs:
#   codecov: codecov/codecov@1.0.5
executors:
  backend-executor:
    docker:
      - image: circleci/elixir:1.11.3-node-browsers
        environment:
          MIX_ENV: test
      - image: circleci/postgres:12.0-alpine
    working_directory: ~/app # directory where steps will run
  frontend-executor:
    docker:
      - image: cimg/node:14.17.6-browsers
    working_directory: ~/app # directory where steps will run
commands:
  update_node_npm:
    steps:
      - run:
          name: "Update Node.js and npm"
          command: |
            curl -sSL "https://nodejs.org/dist/v14.17.6/node-v14.17.6-linux-x64.tar.xz" | sudo tar --strip-components=2 -xJ -C /usr/local/bin/ node-v14.17.6-linux-x64/bin/node
            curl https://www.npmjs.com/install.sh | sudo bash
      - run:
          name: Check current version of node
          command: node -v
jobs:
  build_backend:
    parallelism: 1
    executor: backend-executor
    steps:
      - checkout
      - run: mix local.hex --force
      - run: mix local.rebar --force

      # 1. Run mix deps.get and cache
      - restore_cache:
          keys:
            - dependency-cache-<< pipeline.parameters.cache-version >>-{{ .Branch }}-{{ checksum "mix.lock" }}
            - dependency-cache-<< pipeline.parameters.cache-version >>-{{ .Branch }}
            - dependency-cache-<< pipeline.parameters.cache-version >>
      - restore_cache:
          keys:
            - build-cache-<< pipeline.parameters.cache-version >>-{{ .Branch }}
            - build-cache-<< pipeline.parameters.cache-version >>

      - run: mix do deps.get --only test, deps.compile, compile

      - save_cache:
          key: dependency-cache-<< pipeline.parameters.cache-version >>-{{ .Branch }}-{{ checksum "mix.lock" }}
          paths:
            - deps
      - save_cache:
          key: dependency-cache-<< pipeline.parameters.cache-version >>-{{ .Branch }}
          paths:
            - deps
      - save_cache:
          key: dependency-cache-<< pipeline.parameters.cache-version >>
          paths:
            - deps

      - save_cache:
          key: build-cache-<< pipeline.parameters.cache-version >>-{{ .Branch }}
          paths:
            - _build
      - save_cache:
          key: build-cache-<< pipeline.parameters.cache-version >>
          paths:
            - _build
      - run:
          name: Wait for DB
          command: dockerize -wait tcp://localhost:5432 -timeout 1m

      - run: mix ecto.create
      - run: mix ecto.migrate

      - persist_to_workspace:
                root: ./
                paths:
                  - deps/

      # - run: ./scripts/install-lp mix
      # - run: env $(cat .env.test | xargs) mix coveralls.json -o ./test-reports
      # - run: yarn --cwd ./assets test

      # - codecov/upload:
      #     file: test-reports/excoveralls.json

      # - store_test_results:
      #     path: test-reports/

      # - store_artifacts:
      #     path: screenshots/
  build_frontend:
    parallelism: 1
    executor: frontend-executor
    steps:
      - checkout
      - run: ls ~/app
      - attach_workspace:
          at: ~/app/deps
      # 1. Run Yarn and Cache
      # - update_node_npm
      - restore_cache:
          keys:
            - npm-cache-<< pipeline.parameters.cache-version >>-{{ .Branch }}-{{ checksum "./assets/yarn.lock" }}
            - npm-cache-<< pipeline.parameters.cache-version >>-{{ .Branch }}
            - npm-cache-<< pipeline.parameters.cache-version >>

      - run: cd ./assets && yarn install

      - save_cache:
          key: npm-cache-<< pipeline.parameters.cache-version >>-{{ .Branch }}-{{ checksum "./assets/yarn.lock" }}
          paths:
            - --frozen-lockfile --cache-folder ~/.cache/yarn
      - save_cache:
          key: npm-cache-<< pipeline.parameters.cache-version >>-{{ .Branch }}
          paths:
            - --frozen-lockfile --cache-folder ~/.cache/yarn
      - save_cache:
          key: npm-cache-<< pipeline.parameters.cache-version >>
          paths:
            - --frozen-lockfile --cache-folder ~/.cache/yarn

      # 2. Build frontend:- (not caching webpack until further notice. See inspiration here https://github.com/AlexRiedler/my_project)
      - run: cd assets && pwd && ./node_modules/.bin/webpack --version && ./node_modules/.bin/webpack --mode production

      # - run: cp .env.test.example .env.test
      # - run: mkdir test-reports
      # - run: mkdir screenshots
      # - run:
      #     name: Start chromedriver
      #     command: chromedriver
      #     background: true

    # - run: ./scripts/install-lp mix
      # - run: env $(cat .env.test | xargs) mix coveralls.json -o ./test-reports
      # - run: yarn --cwd ./assets test

      # - codecov/upload:
      #     file: test-reports/excoveralls.json

      # - store_test_results:
      #     path: test-reports/

      # - store_artifacts:
      #     path: screenshots/

workflows:
  version: 2.1

  build_and_test:
    jobs:
      - build_backend
      - build_frontend:
          requires:
            - build_backend
